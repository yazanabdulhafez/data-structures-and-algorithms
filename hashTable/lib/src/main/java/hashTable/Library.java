/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashTable;

import java.util.*;

public class Library {
    public static void main(String[] args) {

//        HashTable<String, Integer> hashTable = new HashTable<>();
//        hashTable.add("first", 5);
//        hashTable.add("second", 100);
//        hashTable.add("first",20);
//        System.out.println(hashTable.size());
//        System.out.println(hashTable.numBuckets);
//        System.out.println(hashTable.contains("first"));
//        System.out.println(hashTable.contains("hi"));
//        System.out.println(hashTable.get("second"));
//        System.out.println(hashTable);
//
//        String str = "It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York...";
//        System.out.println("The repeated word is: " + repeatedWord(str));

        BinaryTree<Integer> binaryTreeOne = new BinaryTree<>(new Node<>(7));
        Node<Integer> node1 = new Node<>(20);
        Node<Integer> node2 = new Node<>(12);
        Node<Integer> node3 = new Node<>(5, node1, node2);
        Node<Integer> node5 = new Node<>(16);
        Node<Integer> node4 = new Node<>(3, node5, null);
        binaryTreeOne.root.rightChild = node4;
        binaryTreeOne.root.leftChild = node3;

        BinaryTree<Integer> binaryTreeTwo = new BinaryTree<>(new Node<>(47));
        Node<Integer> node6 = new Node<>(5);
        Node<Integer> node7 = new Node<>(16);
        Node<Integer> node8 = new Node<>(7, node6, node7);
        Node<Integer> node9 = new Node<>(58);
        Node<Integer> node10 = new Node<>(3, node9, null);
        binaryTreeTwo.root.rightChild = node10;
        binaryTreeTwo.root.leftChild = node8;

        System.out.println(treeIntersection(binaryTreeOne, binaryTreeTwo));

        HashMap<String, String> ht1 = new HashMap<>();
        ht1.put("fond", "enamored");
        ht1.put("wrath", "anger");
        ht1.put("diligent", "employed");
        ht1.put("outfit", "garb");
        ht1.put("guide", "usher");

        HashMap<String, String> ht2 = new HashMap<>();
        ht2.put("fond", "averse");
        ht2.put("something", "delight");

        System.out.println(leftJoin(ht1,ht2));

        String str="No. Try not. Do or do not. There is no try. ";

      System.out.println("answer "+commonWord(str));
    }



    public static String commonWord(String inputStr) {
        ArrayList<String> tempWord = new ArrayList<>();
        Integer tempCount = 0;
        Integer count;

        String[] splitedStr = inputStr.toLowerCase().replace(".", "").split(" ");

        HashTable<String, Integer> record = new HashTable<>();

        for (String word : splitedStr) {

            count = record.get(word);

            if (count == null)
                record.add(word, 1);
            else {
                record.add(word, count + 1);

                if (tempCount < count) {
                    tempCount = count;
                    tempWord=new ArrayList<>();
                    tempWord.add(word);
                    System.out.println(tempWord);

                }else if(tempCount.equals(count)){
                    tempWord.add(word);
                }
            }

        }

            for (String word : splitedStr) {
                if (tempWord.contains(word)) {
                    return word;
                }
            }
            return "none";

    }



    public static ArrayList<ArrayList<String>> leftJoin(HashMap ht1, HashMap ht2) {
        ArrayList<ArrayList<String>> result = new ArrayList<>();

        Set ht1KeySet  = ht1.keySet();
        for (Object key : ht1KeySet) {
            ArrayList<String> strings = new ArrayList<>();

            strings.add(String.valueOf(key));
            strings.add(String.valueOf(ht1.get(key)));

            if (ht2.containsKey(key)) {
                strings.add(String.valueOf(ht2.get(key)));
            } else {
                strings.add(null);
            }

            result.add(strings);
        }

        return result;
    }


        public static <V> ArrayList<V> treeIntersection(BinaryTree<V> tree1, BinaryTree<V> tree2) {
            ArrayList<V> response = new ArrayList<>();
            if (tree1.root==null || tree2.root==null) {
                return null;
            } else {
                List<V> inTree1 = tree1.preOrder(tree1.root);
                System.out.println(inTree1);
                List<V> inTree2 = tree2.preOrder(tree2.root);
                for (V val : inTree1) {
                    if (inTree2.contains(val)) {
                        response.add(val);
                    }
                }
                return response;
            }

        }





    public static String repeatedWord(String str) {
        String[] inputStr = str.toLowerCase().replace(",", "").split(" ");
        HashTable<String, Integer> setOfWords = new HashTable<>();

        for (String s : inputStr) {
            if (setOfWords.contains(s)) {
                setOfWords.add(s, setOfWords.get(s) + 1); // word exists
                return s; //return the first word repeated
            } else
                // insert new word to set
                setOfWords.add(s, 1);
        }


        return "NoRepetition";
    }



}
