/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashTable;

import java.util.ArrayList;
import java.util.List;

public class Library {
    public static void main(String[] args) {

//        HashTable<String, Integer> hashTable = new HashTable<>();
//        hashTable.add("first", 5);
//        hashTable.add("second", 100);
//        hashTable.add("first",20);
//        System.out.println(hashTable.size());
//        System.out.println(hashTable.numBuckets);
//        System.out.println(hashTable.contains("first"));
//        System.out.println(hashTable.contains("hi"));
//        System.out.println(hashTable.get("second"));
//        System.out.println(hashTable);
//
//        String str = "It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York...";
//        System.out.println("The repeated word is: " + repeatedWord(str));

        BinaryTree<Integer> binaryTreeOne = new BinaryTree<>(new Node<>(7));
        Node<Integer> node1 = new Node<>(20);
        Node<Integer> node2 = new Node<>(12);
        Node<Integer> node3 = new Node<>(5, node1, node2);
        Node<Integer> node5 = new Node<>(16);
        Node<Integer> node4 = new Node<>(3, node5, null);
        binaryTreeOne.root.rightChild = node4;
        binaryTreeOne.root.leftChild = node3;

        BinaryTree<Integer> binaryTreeTwo = new BinaryTree<>(new Node<>(47));
        Node<Integer> node6 = new Node<>(5);
        Node<Integer> node7 = new Node<>(16);
        Node<Integer> node8 = new Node<>(7, node6, node7);
        Node<Integer> node9 = new Node<>(58);
        Node<Integer> node10 = new Node<>(3, node9, null);
        binaryTreeTwo.root.rightChild = node10;
        binaryTreeTwo.root.leftChild = node8;

        System.out.println(treeIntersection(binaryTreeOne, binaryTreeTwo));
    }


        public static <V> ArrayList<V> treeIntersection(BinaryTree<V> tree1, BinaryTree<V> tree2) {
            ArrayList<V> response = new ArrayList<>();
            if (tree1.root==null || tree2.root==null) {
                return null;
            } else {
                List<V> inTree1 = tree1.preOrder(tree1.root);
                System.out.println(inTree1);
                List<V> inTree2 = tree2.preOrder(tree2.root);
                for (V val : inTree1) {
                    if (inTree2.contains(val)) {
                        response.add(val);
                    }
                }
                return response;
            }

        }





    public static String repeatedWord(String str) {
        String[] inputStr = str.toLowerCase().replace(",", "").split(" ");
        HashTable<String, Integer> setOfWords = new HashTable<>();

        for (String s : inputStr) {
            if (setOfWords.contains(s)) {
                setOfWords.add(s, setOfWords.get(s) + 1); // word exists
                return s; //return the first word repeated
            } else
                // insert new word to set
                setOfWords.add(s, 1);
        }


        return "NoRepetition";
    }


}
