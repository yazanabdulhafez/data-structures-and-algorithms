/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }

    //Can successfully push onto a stack
    @Test void  pushOntoAStack() {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        String expected ="Stack: top=[5]-->NULL";
        assertEquals(expected,stack.toString());
    }

    //Can successfully push multiple values onto a stack
    @Test void  pushMultipleValues() {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(4);
        stack.push(3);
        String expected ="Stack: top=[3]-->[4]-->[5]-->NULL";
        assertEquals(expected,stack.toString());
    }

    //Can successfully pop off the stack
    @Test void  popValue() {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(4);
        stack.pop();
        int expected =5;
        assertEquals(expected,stack.pop());

    }

    //Can successfully empty a stack after multiple pops
    @Test void  emptyStackAfterMultiplePops() {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(4);
        stack.pop();
        stack.pop();
        stack.pop();
        assertNull(stack.toString());
    }

    //Can successfully peek the next item on the stack
    @Test void  peekTheNextItemOnTheStack() {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(4);
        int expected = 4;
        assertEquals(expected,stack.peek());
    }

    //Can successfully instantiate an empty stack
    @Test void  CanSuccessfullyInstantiateAnEmptyStack() {
        Stack<Integer> stack = new Stack<>();
        assertNull(stack.toString());
    }

    //Calling pop or peek on empty stack raises exception
    @Test void  popOrPeekOnEmptyStackRaisesException() {
        Stack<Integer> stack = new Stack<>();
        stack.pop();
        stack.peek();
        assertNull(stack.toString());
    }

    //Can successfully enqueue into a queue
    @Test void  enqueueIntoAQueue() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        String expected ="Queue: front=[5]=back";
        assertEquals(expected,queue.toString());
    }

    //Can successfully enqueue multiple values into a queue
    @Test void  enqueueMultipleValuesIntoAQueue() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(3);
        String expected ="Queue: front=[5]-->[4]-->[3]=back";
        assertEquals(expected,queue.toString());
    }

    //Can successfully dequeue out of a queue the expected value
    @Test void  dequeueOutOfAQueueTheExpectedValue() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(3);
        queue.dequeue();
        String expected ="Queue: front=[4]-->[3]=back";
        assertEquals(expected,queue.toString());
    }

    //Can successfully peek into a queue, seeing the expected value
    @Test void  peekIntoAQueueSeeingTheExpectedValue() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(3);
        int expected = 5;
        assertEquals(expected,queue.peek());
    }

    //Can successfully empty a queue after multiple dequeues
    @Test void  emptyAQueueAfterMultipleDequeues() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(3);
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        assertNull(queue.toString());
    }

    //Can successfully instantiate an empty queue
    @Test void  instantiateAnEmptyQueue() {
        Queue<Integer> queue = new Queue<>();
        assertNull(queue.toString());
    }

    //Calling dequeue or peek on empty queue raises exception
    @Test void  CallingDequeueOrPeekOnEmptyQueueRaisesException() {
        Queue<Integer> queue = new Queue<>();
        assertNull(queue.toString());
        queue.peek();
        assertNull(queue.toString());
    }

    //    stack-queue-pseudo
    @Test void stackQueuePseudo() {
        PseudoQueue<Integer> test = new PseudoQueue<>();

        // Edge case "List is empty"
        assertNull(test.dequeue());

        test.enqueue(5);
        test.enqueue(3);
        test.enqueue(2);
        test.enqueue(4);
        test.enqueue(6);

        // Happy path - delete first in "5"
        assertEquals(5, test.dequeue());

        test.dequeue();
        test.dequeue();

        // Correct removing "4"
        assertEquals(4, test.dequeue());
    }

    @Test
    public void animalShelterTest(){
        AnimalShelter animalShelter=new AnimalShelter();
        System.out.println(animalShelter.toString());
        Dog max=new Dog("max");
        Cat franki=new Cat("franki");
        Cat loosy=new Cat("loosy");
       Dog sheberd=new Dog("sheberd");
       Cat daizy=new Cat("daizy");

       //test for Edge case "object is empty"
       assertNull(animalShelter.toString());


       //test Add cats and dogs in order "first in first out"
        animalShelter.enqueue(max);
        animalShelter.enqueue(franki);
        animalShelter.enqueue(loosy);
        animalShelter.enqueue(sheberd);
        animalShelter.enqueue(daizy);

        String expectedStr="AnimalShelter[catGroup=Queue: front=[Cat{name= franki}]"
                +"-->[Cat{name= loosy}]-->[Cat{name= daizy}]=back, dogGroup=Queue:"+"" +
                " front=[Dog{name= max}]-->[Dog{name= sheberd}]=back]";

        assertEquals(expectedStr,animalShelter.toString());


        //test to ensure that first cat is first cat out
        assertEquals(franki,animalShelter.dequeue("cat"));


        //test to ensure that first dog is first dog out
        assertEquals(max,animalShelter.dequeue("dog"));

        // If pref is not "dog" or "cat" then return "null".

        assertNull(animalShelter.dequeue("none"));


    }

    @Test
    public void validatorBracetsTest(){
Validator testValidator=new Validator();

assertTrue(testValidator.validateBrackets("{}"));
assertTrue(testValidator.validateBrackets("{}(){}"));
assertTrue(testValidator.validateBrackets("()[[Extra Characters]]"));

assertTrue(testValidator.validateBrackets("(){}[[]]"));
assertTrue(testValidator.validateBrackets("{}{Code}[Fellows](())"));
assertFalse(testValidator.validateBrackets("[({}]"));
assertFalse(testValidator.validateBrackets("(]("));
assertFalse(testValidator.validateBrackets("{(})"));

assertFalse(testValidator.validateBrackets("{"));
assertFalse(testValidator.validateBrackets(")"));
assertFalse(testValidator.validateBrackets("[}"));


    }

}
