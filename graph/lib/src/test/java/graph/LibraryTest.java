/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test
    public void graph() {

//    An empty graph properly returns null
        Graph<String> testGraph = new Graph<>();
        assertNull(testGraph.toString());

//    Node can be successfully added to the graph

        Vertex<String> vertexA=testGraph.addNode("5");
        assertEquals("[5]", testGraph.getNodes().toString());

//    A graph with only one node and edge can be properly returned

        testGraph.addEdge(vertexA, vertexA, 0);
        System.out.println(testGraph);
        assertEquals("[5]", testGraph.getNeighbors(vertexA).toString());
        assertEquals("{5=[5]}", testGraph.adjacencyList.toString());

//    An edge can be successfully added to the graph
        Vertex<String> vertexB=testGraph.addNode("6");
        testGraph.addEdge(vertexA, vertexB, 0);
        assertEquals("[5, 6]", testGraph.getNeighbors(vertexA).toString());
        assertEquals("[5]", testGraph.getNeighbors(vertexB).toString());

//    A collection of all nodes can be properly retrieved from the graph
        assertEquals("[5, 6]", testGraph.getNodes().toString());

//    All appropriate neighbors can be retrieved from the graph
        assertEquals("{5=[5, 6], 6=[5]}", testGraph.adjacencyList.toString());

//    The proper size is returned, representing the number of nodes in the graph
        assertEquals(2, testGraph.size());

    }


    @Test
    public void graphBreadthFirst() {

        // if the graph is empty return null
        Graph<String> myGraph = new Graph<>();
        assertNull(myGraph.breadthFirst(null));

        // if we have one node with no edges return that node
        Vertex<String> vertexA=myGraph.addNode("8");
        assertEquals("[8]", myGraph.breadthFirst(vertexA).toString());

        // graph with only one node and one edge with itself return that node
        myGraph.addEdge(vertexA, vertexA, 0);
        assertEquals("[8]", myGraph.breadthFirst(vertexA).toString());

        // happy path
        Vertex<String> vertex2=myGraph.addNode("2");
        Vertex<String> vertex1=myGraph.addNode("1");
        Vertex<String> vertex9=myGraph.addNode("9");
        Vertex<String> vertex7=myGraph.addNode("7");
        Vertex<String> vertex5=myGraph.addNode("5");
        myGraph.addEdge(vertexA, vertex9, 10);
        myGraph.addEdge(vertexA, vertex2, 20);
        myGraph.addEdge(vertexA, vertex1, 20);
        myGraph.addEdge(vertex5, vertex1, 50);
        myGraph.addEdge(vertex7, vertex5, 70);
        assertEquals("[8, 9, 2, 1, 5, 7]", myGraph.breadthFirst(vertexA).toString());

        /* Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo
         */
        Vertex<String> vertexP=myGraph.addNode("Pandora");
        Vertex<String> vertexAr=myGraph.addNode("Arendelle");
        Vertex<String> vertexMet=myGraph.addNode("Metroville");
        Vertex<String> vertexMon=myGraph.addNode("Monstroplolis");
        Vertex<String> vertexNa=myGraph.addNode("Narnia");
        Vertex<String> vertexNab=myGraph.addNode("Naboo");
        myGraph.addEdge(vertexP, vertexAr, 0);
        myGraph.addEdge(vertexAr, vertexMet,0 );
        myGraph.addEdge(vertexAr, vertexMet, 0);
        myGraph.addEdge(vertexMet, vertexMon, 0);
        myGraph.addEdge(vertexMet, vertexNa, 0);
        myGraph.addEdge(vertexMet, vertexNab, 0);
        myGraph.addEdge(vertexNa, vertexNab, 0);
        myGraph.addEdge(vertexMon, vertexNab, 0);
        String expected="[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]";
        assertEquals(expected,myGraph.breadthFirst(vertexP).toString());
    }
@Test
    public void businessTripTest() {
        Graph<String> graph = new Graph<>();

        Vertex<String> v1 = graph.addNode("Pandora");
        Vertex<String> v2 = graph.addNode("Arendelle");
        Vertex<String> v3 = graph.addNode("Metroville");
        Vertex<String> v4 = graph.addNode("Monstroplolis");
        Vertex<String> v5 = graph.addNode("Narnia");
        Vertex<String> v6 = graph.addNode("Naboo");

        graph.addEdge(v1, v3, 82);
        graph.addEdge(v1, v2, 150);
        graph.addEdge(v2, v3, 99);
        graph.addEdge(v2, v4, 42);
        graph.addEdge(v3, v4, 105);
        graph.addEdge(v3, v5, 37);
        graph.addEdge(v3, v6, 26);
        graph.addEdge(v4, v6, 73);
        graph.addEdge(v5, v6, 250);


        // move in the same node
        Vertex[] trip1 = new Vertex[] {v1};
        assertEquals("false, $0" , graph.businessTrip(graph,trip1));

        // valid trips
        Vertex[] trip2 = new Vertex[] {v1,v3};
        Vertex[] trip3 = new Vertex[] {v2,v3,v4};
        assertEquals("true, $82" , graph.businessTrip(graph,trip2));
        assertEquals("true, $204" , graph.businessTrip(graph,trip3));

        // invalid trips
        Vertex[] trip5 = new Vertex[] {v4 , v5};
        Vertex[] trip6 = new Vertex[] {v3 , v4 , v5 };
        assertEquals("false, $0" , graph.businessTrip(graph,trip5));
        assertEquals("false, $0" , graph.businessTrip(graph,trip6));

        // Round trip
        Vertex[] cities = new Vertex[]{ v1, v2, v3, v4 };
        Vertex[] cities1 = new Vertex[]{ v1, v2, v3, v4,v6,v5 };
        assertEquals("true, $354", graph.businessTrip(graph, cities));
        assertEquals("true, $677", graph.businessTrip(graph, cities1));
    }

    @Test
    public void graphDepthFirst() {

        // if the graph is empty return null
        Graph<String> graph = new Graph();
        assertNull(graph.depthFirst(null));

//        // if we have one node with no edges return that node
        Vertex<String> v1 = graph.addNode("A");
        assertEquals("[A]", graph.depthFirst(v1).toString());
//
//        // graph with only one node and one edge with itself return that node
        graph.addEdge(v1, v1, 0);
      assertEquals("[A]", graph.depthFirst(v1).toString());

        //happy path
        Vertex<String> v2 = graph.addNode("B");
        Vertex<String> v3 = graph.addNode("C");
        Vertex<String> v4 = graph.addNode("D");
        Vertex<String> v5 = graph.addNode("E");
        Vertex<String> v6 = graph.addNode("F");
        Vertex<String> v8 = graph.addNode("G");
        Vertex<String> v7 = graph.addNode("H");

        graph.addEdge(v1, v4, 0);
        graph.addEdge(v4, v5, 0);
        graph.addEdge(v4, v7, 0);
        graph.addEdge(v4, v6, 0);
        graph.addEdge(v1, v2, 0);


        graph.addEdge(v2, v3, 0);
        graph.addEdge(v2, v4, 0);

        graph.addEdge(v3, v8, 0);


        graph.addEdge(v6, v7, 0);
        System.out.println(graph);

        assertEquals("[A, B, D, F, H, E, C, G]", graph.depthFirst(v1).toString());
    }

}
