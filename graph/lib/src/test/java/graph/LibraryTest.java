/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test
    public void graph() {

//    An empty graph properly returns null
        Graph<String> testGraph = new Graph<>();
        assertNull(testGraph.toString());

//    Node can be successfully added to the graph

        Vertex<String> vertexA=testGraph.addNode("A");
        assertEquals("[{A}]", testGraph.getNodes().toString());

//    A graph with only one node and edge can be properly returned

        testGraph.addEdge(vertexA, vertexA, 0);
        System.out.println(testGraph);
        assertEquals("[{A}]", testGraph.getNeighbors(vertexA).toString());
        assertEquals("{{A}=[{A}]}", testGraph.adjacencyList.toString());

//    An edge can be successfully added to the graph
        Vertex<String> vertexB=testGraph.addNode("B");
        testGraph.addEdge(vertexA, vertexB, 0);
        assertEquals("[{A}, {B}]", testGraph.getNeighbors(vertexA).toString());
        assertEquals("[{A}]", testGraph.getNeighbors(vertexB).toString());

//    A collection of all nodes can be properly retrieved from the graph
        assertEquals("[{B}, {A}]", testGraph.getNodes().toString());

//    All appropriate neighbors can be retrieved from the graph
        assertEquals("{{B}=[{A}], {A}=[{A}, {B}]}", testGraph.adjacencyList.toString());

//    The proper size is returned, representing the number of nodes in the graph
        assertEquals(2, testGraph.size());

    }

}
